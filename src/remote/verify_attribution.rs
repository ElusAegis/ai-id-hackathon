use p256::pkcs8::DecodePublicKey;
use std::{str, time::Duration};

use tlsn_core::proof::{SessionProof, TlsProof};

/// A simple verifier which reads a proof generated by `simple_prover.rs` from "proof.json", verifies
/// it and prints the verified data to the console.
pub fn verify_attribution(proof_path: &str) -> Result<(), Box<dyn std::error::Error>> {
    #[cfg(not(feature = "dummy-notary"))]
    Err("Currently unsupported without the dummy-notary feature. Enable the dummy-notary feature to run this example."
        .to_string())?;

    println!("ðŸš¨ WARNING: Verifying a proof generated by a dummy notary.");
    println!("ðŸš¨ WARNING: Dummy notary is used for testing purposes only. It is not secure and should not be used in production.");

    // Deserialize the proof
    let proof = std::fs::read_to_string(proof_path)
        .map_err(|e| format!("Failed to read proof at {}: {}", proof_path, e))?;
    let proof: TlsProof = serde_json::from_str(proof.as_str())
        .map_err(|e| format!("Failed to parse proof: {}", e))?;

    let TlsProof {
        // The session proof establishes the identity of the server and the commitments
        // to the TLS transcript.
        session,
        // The substrings proof proves select portions of the transcript, while redacting
        // anything the Prover chose not to disclose.
        substrings,
    } = proof;

    // Verify the session proof against the Notary's public key
    //
    // This verifies the identity of the server using a default certificate verifier which trusts
    // the root certificates from the `webpki-roots` crate.
    session
        .verify_with_default_cert_verifier(notary_pubkey()?)
        .map_err(|e| format!("Failed to verify session proof: {}", e))?;

    let SessionProof {
        // The session header that was signed by the Notary is a succinct commitment to the TLS transcript.
        header,
        // This is the session_info, which contains the server_name, that is checked against the
        // certificate chain shared in the TLS handshake.
        session_info,
        ..
    } = session;

    // The time at which the session was recorded
    let time = chrono::DateTime::UNIX_EPOCH + Duration::from_secs(header.time());

    // Verify the substrings proof against the session header.
    //
    // This returns the redacted transcripts
    let (mut sent, mut recv) = substrings.verify(&header).unwrap();

    // Replace the bytes which the Prover chose not to disclose with 'X'
    sent.set_redacted(b'X');
    recv.set_redacted(b'X');

    println!("-------------------------------------------------------------------");
    println!(
        "Successfully verified that the bytes below came from a session with {:?} at {}.",
        session_info.server_name, time
    );
    println!("Note that the bytes which the Prover chose not to disclose are shown as X.");
    println!();
    println!("Messages sent:");
    println!();
    println!("{}", String::from_utf8(sent.data().to_vec()).unwrap());
    println!();
    println!("Messages received:");
    println!();
    println!("{}", String::from_utf8(recv.data().to_vec()).unwrap());
    println!("-------------------------------------------------------------------");

    Ok(())
}

/// Returns a Notary pubkey trusted by this Verifier
fn notary_pubkey() -> Result<p256::PublicKey, String> {
    let pem_file = str::from_utf8(include_bytes!("../../tlsn/notary.pub"))
        .map_err(|e| format!("Failed to read Notary pubkey: {}", e))?;
    Ok(p256::PublicKey::from_public_key_pem(pem_file)
        .map_err(|e| format!("Failed to parse Notary pubkey: {}", e))?)
}
