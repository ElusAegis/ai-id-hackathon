name: Rust CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version to release"
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        components: clippy, rustfmt

    - name: Check code formatting
      run: cargo fmt -- --check

    - name: Run Clippy
      run: cargo clippy -- -D warnings

    - name: Build the project
      run: cargo build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: target/release/passport-for-ai

  test-local:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Change permissions for the binary
      run: chmod +x passport-for-ai

    - name: Run local `create-passport`
      run: ./passport-for-ai local create-passport model/network.onnx --save-to ./model

    - name: Run local `attribute-content`
      run: ./passport-for-ai local attribute-content model/network.onnx model/input.json --save-to ./model

    - name: Run local `verify-attribution`
      run: ./passport-for-ai local verify-attribution model/model_network_db9e2eef_passport.json model/model_db9e2eef_attribution_certificate.json

  test-remote:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Change permissions for the binary
      run: chmod +x passport-for-ai

    - name: Run remote `anthropic-conversation`
      run: echo "Hello Claud\nexit\n" | ./passport-for-ai remote anthropic-conversation
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Run remote `verify-attribution`
      run: ./passport-for-ai remote verify-attribution claud_conversation_proof.json

  release:
    if: github.event.inputs.release_version != ''
    runs-on: ubuntu-latest
#    needs: [build, test-local, test-remote]

    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-apple-darwin]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install macOS target
      run: rustup target add x86_64-apple-darwin

    - name: Install cross for building multiple targets
      run: cargo install cross

    - name: Build for ${{ matrix.target }}
      run: cross build --release --target ${{ matrix.target }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ matrix.target }}
        path: ./target/${{ matrix.target }}/release

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        release_name: "Release ${{ github.event.inputs.release_version }}"
        draft: false
        prerelease: false

    - name: Upload Executable Binaries
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/your-executable
        asset_name: your-executable-${{ matrix.target }}
        asset_content_type: application/octet-stream